---
import Layout from "../layouts/Layout.astro";
import XboxGameCard from "../components/XboxComponents/XboxGameCard.astro";
import { getCollection } from "astro:content";

const xbox = await getCollection("xboxContent");

const itemsPerPage = 12;
const url = new URL(Astro.request.url);

// --- Lógica de Filtros ---
const selectedTypes = url.searchParams.get("type")?.split(",") || [];
const selectedCategories = url.searchParams.get("category")?.split(",") || [];
const minPriceParam = url.searchParams.get("minPrice");
const maxPriceParam = url.searchParams.get("maxPrice");

const minPrice = minPriceParam ? Number(minPriceParam) : 0;
const maxPrice = maxPriceParam ? Number(maxPriceParam) : 100;

const filteredGames = xbox.filter((game) => {
  // Filtro por tipo
  if (selectedTypes.length > 0 && !selectedTypes.includes(game.data.type)) {
    return false;
  }
  if (selectedCategories.length > 0) {
    const gameCategories = game.data.categories || []; // Asegúrate de que existe
    if (!selectedCategories.some(cat => gameCategories.includes(cat))) {
      return false;
    }
  }

  // Filtro por precio
  if (game.data.price < minPrice || game.data.price > maxPrice) {
    return false;
  }
  return true;
});


// --- Lógica de Paginación ---
const page = Number(url.searchParams.get("page")) || 1;
const totalFilteredPages = Math.ceil(filteredGames.length / itemsPerPage);

const paginatedGames = filteredGames.slice(
  (page - 1) * itemsPerPage,
  page * itemsPerPage,
);
---

<Layout title="G2A - Xbox">
  <section
    class="max-w-7xl mx-auto px-4 py-8 grid grid-cols-1 md:grid-cols-4 gap-8"
  >
    <aside class="hidden md:block col-span-1">
      <div
        class="space-y-8 p-6 bg-white border border-gray-200 rounded-xl shadow-lg sticky top-8"
      >
        <div>
          <h3 class="text-xl font-bold mb-4 text-gray-800">Tipo</h3>
          <div class="flex flex-col gap-3">
            {
              ["Clave", "Regalo", "Cuenta"].map((tipo) => (
                <label class="flex items-center gap-2 cursor-pointer text-gray-700 hover:text-green-600 transition-colors duration-200">
                  <input
                    type="checkbox"
                    name="type"
                    value={tipo}
                    class="accent-green-500 h-4 w-4"
                    checked={selectedTypes.includes(tipo)}
                  />
                  {tipo}
                  <span class="text-xs text-gray-500 ml-1">
                    ({filteredGames.filter(game => game.data.type === tipo).length})
                  </span>
                </label>
              ))
            }
          </div>
        </div>

        <div>
          <h3 class="text-xl font-bold mb-4 text-gray-800">Categorías</h3>
          <div id="category-list" class="flex flex-col gap-3">
            {
              [
                "Acción",
                "Aventura",
                "Deportes",
                "Estrategia",
                "Rol",
                "Simulación",
                "Terror",
                "Carreras",
                "Puzzle",
                "Plataformas",
                "Shooter",
                "Survival",
                "Indie",
                "Multijugador",
                "Sandbox",
              ].map((category, idx) => (
                <label
                  class={`flex items-center gap-2 cursor-pointer text-gray-700 hover:text-green-600 transition-colors duration-200 ${idx > 9 ? "hidden extra-category" : ""}`}
                >
                  <input
                    type="checkbox"
                    name="category"
                    value={category}
                    class="accent-green-500 h-4 w-4"
                    checked={selectedCategories.includes(category)}
                  />
                  {category}
                  <span class="text-xs text-gray-500 ml-1">
                    ({filteredGames.filter(game => (game.data.categories || []).includes(category)).length})
                  </span>
                </label>
              ))
            }
          </div>

          <button
            type="button"
            onclick="toggleCategories(event)"
            class="mt-4 text-sm text-white bg-green-600 hover:bg-green-700 px-4 py-2 rounded-lg transition duration-200 shadow-md"
          >
            Mostrar más
          </button>
        </div>

        <div>
          <h3 class="text-xl font-bold mb-4 text-gray-800">Precio</h3>
          <div class="bg-gray-50 p-4 rounded-lg border border-gray-200">
            <div class="flex items-center gap-3 mb-4">
              <input
                id="min-price"
                type="number"
                min="0"
                value={minPrice}
                class="w-24 border border-gray-300 rounded-md p-2 text-sm text-center focus:border-green-500 focus:ring-1 focus:ring-green-500 transition"
              />
              <span class="text-gray-500 font-semibold">-</span>
              <input
                id="max-price"
                type="number"
                min="0"
                value={maxPrice}
                class="w-24 border border-gray-300 rounded-md p-2 text-sm text-center focus:border-green-500 focus:ring-1 focus:ring-green-500 transition"
              />
            </div>

            <input
              id="price-range"
              type="range"
              min="0"
              max="100"
              value={maxPrice}
              class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-green-500"
            />
          </div>
        </div>
        <button
            type="button"
            onclick="applyFilters()"
            class="w-full text-lg text-white bg-green-600 hover:bg-green-700 px-4 py-3 rounded-lg transition duration-200 shadow-md font-semibold"
          >
            Aplicar Filtros
          </button>
      </div>
    </aside>

    <main class="col-span-3">
      <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-6">
        {
          paginatedGames.map((game) => (
            <div class="game-card">
              <a href={`/xbox/${game.slug}`} class="block">
                <XboxGameCard {...game.data} />
              </a>
            </div>
          ))
        }
        {paginatedGames.length === 0 && (
          <p class="col-span-full text-center text-gray-600 text-lg py-10">
            No se encontraron juegos con los filtros seleccionados.
          </p>
        )}
      </div>

      <div class="text-center mt-8 text-lg text-gray-700 font-medium">
        Mostrando {paginatedGames.length} de {filteredGames.length} artículos
      </div>

      <div class="flex justify-center mt-6 gap-3 pagination">
        {
          Array.from({ length: totalFilteredPages }, (_, i) => {
            const p = i + 1;
            return (
              <a
                href={`?page=${p}${selectedTypes.length > 0 ? `&type=${selectedTypes.join(',')}` : ''}${selectedCategories.length > 0 ? `&category=${selectedCategories.join(',')}` : ''}${minPrice !== 0 ? `&minPrice=${minPrice}` : ''}${maxPrice !== 100 ? `&maxPrice=${maxPrice}` : ''}`}
                class={`px-4 py-2 rounded-lg border border-gray-300 text-sm font-medium hover:bg-green-100 hover:border-green-500 transition duration-200 ${p === page ? "bg-green-500 text-white border-green-500" : "bg-white text-gray-700"}`}
              >
                {p}
              </a>
            );
          })
        }
      </div>
    </main>
  </section>

  <script is:inline>
    // --- Lógica para el botón "Mostrar más categorías" ---
    function toggleCategories(event) {
      const extras = document.querySelectorAll(".extra-category");
      extras.forEach((el) => el.classList.toggle("hidden"));
      const btn = event.target;
      if (btn.innerText === "Mostrar más") {
        btn.innerText = "Mostrar menos";
      } else {
        btn.innerText = "Mostrar más";
      }
    }

    // --- Lógica de Sincronización de Precios ---
    const minPriceInput = document.getElementById("min-price");
    const maxPriceInput = document.getElementById("max-price");
    const priceRange = document.getElementById("price-range");

    // Sincronizar el input de rango con los inputs de número
    maxPriceInput.addEventListener("input", () => {
      priceRange.value = maxPriceInput.value;
    });

    priceRange.addEventListener("input", () => {
      maxPriceInput.value = priceRange.value;
    });

    // --- Lógica de Aplicar Filtros (manejo de URL) ---
    function applyFilters() {
      const currentUrl = new URL(window.location.href);
      const newSearchParams = new URLSearchParams();

      // Recoger tipos seleccionados
      const typeCheckboxes = document.querySelectorAll('input[name="type"]:checked');
      const selectedTypes = Array.from(typeCheckboxes).map(cb => cb.value);
      if (selectedTypes.length > 0) {
        newSearchParams.set("type", selectedTypes.join(","));
      }

      // Recoger categorías seleccionadas
      const categoryCheckboxes = document.querySelectorAll('input[name="category"]:checked');
      const selectedCategories = Array.from(categoryCheckboxes).map(cb => cb.value);
      if (selectedCategories.length > 0) {
        newSearchParams.set("category", selectedCategories.join(","));
      }

      // Recoger rango de precios
      const minPrice = document.getElementById("min-price").value;
      const maxPrice = document.getElementById("max-price").value;
      if (minPrice !== "0") {
          newSearchParams.set("minPrice", minPrice);
      }
      if (maxPrice !== "100") { // Asumimos 100 como valor por defecto, ajusta si es necesario
          newSearchParams.set("maxPrice", maxPrice);
      }

      // Reiniciar la página a 1 al aplicar nuevos filtros
      newSearchParams.set("page", "1");

      window.location.search = newSearchParams.toString();
    }
  </script>
</Layout>